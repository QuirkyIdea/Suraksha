<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.12.1">

    <issue
        id="MissingPermission"
        severity="Error"
        message="Call requires permission which may be rejected by user: code should explicitly check to see if permission is available (with `checkPermission`) or explicitly handle a potential `SecurityException`"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with `targetSdkVersion` 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="            fusedLocationClient.requestLocationUpdates("
        errorLine2="            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="116"
            column="13"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.ROOT)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                text = String.format(&quot;%02d:%02d&quot;, minutes, seconds),"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\HomeScreen.kt"
            line="326"
            column="24"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level 33 (current min is 24): `android.Manifest.permission#POST_NOTIFICATIONS`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="        Manifest.permission.POST_NOTIFICATIONS"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\utils\PermissionManager.kt"
            line="18"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 26, or core library desugaring (current min is 24): `java.time.format.DateTimeFormatter#ISO_LOCAL_DATE_TIME`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    private val formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Converters.kt"
            line="8"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#parse`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return value?.let { LocalDateTime.parse(it, formatter) }"
        errorLine2="                                          ~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Converters.kt"
            line="12"
            column="43"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#format`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return date?.format(formatter)"
        errorLine2="                     ~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Converters.kt"
            line="17"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    val createdAt: LocalDateTime = LocalDateTime.now()"
        errorLine2="                                                 ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Entities.kt"
            line="14"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    val createdAt: LocalDateTime = LocalDateTime.now()"
        errorLine2="                                                 ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Entities.kt"
            line="14"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    val updatedAt: LocalDateTime = LocalDateTime.now()"
        errorLine2="                                                 ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Entities.kt"
            line="22"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    val updatedAt: LocalDateTime = LocalDateTime.now()"
        errorLine2="                                                 ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Entities.kt"
            line="22"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    val timestamp: LocalDateTime = LocalDateTime.now(),"
        errorLine2="                                                 ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Entities.kt"
            line="32"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    val timestamp: LocalDateTime = LocalDateTime.now(),"
        errorLine2="                                                 ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\data\Entities.kt"
            line="32"
            column="50"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `android.os.VibrationEffect#createWaveform`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        vibrator?.vibrate(VibrationEffect.createWaveform(pattern, 0))"
        errorLine2="                                          ~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\FakeCallActivity.kt"
            line="85"
            column="43"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `android.os.Vibrator#vibrate`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        vibrator?.vibrate(VibrationEffect.createWaveform(pattern, 0))"
        errorLine2="                  ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\FakeCallActivity.kt"
            line="85"
            column="19"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            val endTime = LocalDateTime.now().plusMinutes(minutes.toLong())"
        errorLine2="                                        ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="131"
            column="41"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#plusMinutes`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            val endTime = LocalDateTime.now().plusMinutes(minutes.toLong())"
        errorLine2="                                              ~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="131"
            column="47"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#isBefore`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            while (_timerState.value.isActive &amp;&amp; LocalDateTime.now().isBefore(endTime)) {"
        errorLine2="                                                                     ~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="142"
            column="70"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            while (_timerState.value.isActive &amp;&amp; LocalDateTime.now().isBefore(endTime)) {"
        errorLine2="                                                               ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="142"
            column="64"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Implicit cast from `LocalDateTime` to `ChronoLocalDateTime` requires API level 26, or core library desugaring (current min is 24)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            while (_timerState.value.isActive &amp;&amp; LocalDateTime.now().isBefore(endTime)) {"
        errorLine2="                                                                              ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="142"
            column="79"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.Duration#between`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                val remainingSeconds = java.time.Duration.between(LocalDateTime.now(), endTime).seconds"
        errorLine2="                                                          ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="144"
            column="59"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.Duration#getSeconds`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                val remainingSeconds = java.time.Duration.between(LocalDateTime.now(), endTime).seconds"
        errorLine2="                                                                                                ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="144"
            column="97"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                val remainingSeconds = java.time.Duration.between(LocalDateTime.now(), endTime).seconds"
        errorLine2="                                                                                ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="144"
            column="81"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Implicit cast from `LocalDateTime` to `Temporal` requires API level 26, or core library desugaring (current min is 24)"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                val remainingSeconds = java.time.Duration.between(LocalDateTime.now(), endTime).seconds"
        errorLine2="                                                                                       ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\viewmodels\MainViewModel.kt"
            line="144"
            column="88"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `android.app.NotificationChannel()`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        val channel = NotificationChannel("
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\services\SafetyService.kt"
            line="73"
            column="23"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `android.app.NotificationChannel#setDescription`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            description = &quot;Keeps the safety service running&quot;"
        errorLine2="            ~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\services\SafetyService.kt"
            line="78"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `android.app.NotificationChannel#setDescription`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            description = &quot;Keeps the safety service running&quot;"
        errorLine2="                        ~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\services\SafetyService.kt"
            line="78"
            column="25"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `android.app.NotificationManager#createNotificationChannel`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        notificationManager.createNotificationChannel(channel)"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\services\SafetyService.kt"
            line="82"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#format`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            val timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;))"
        errorLine2="                                                ~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\services\SafetyService.kt"
            line="154"
            column="49"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            val timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;))"
        errorLine2="                                          ~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\services\SafetyService.kt"
            line="154"
            column="43"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26, or core library desugaring (current min is 24): `java.time.format.DateTimeFormatter#ofPattern`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            val timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy HH:mm&quot;))"
        errorLine2="                                                                         ~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\services\SafetyService.kt"
            line="154"
            column="74"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `showWhenLocked` is only used in API level 27 and higher (current min is 24)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="            android:showWhenLocked=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute `turnScreenOn` is only used in API level 27 and higher (current min is 24)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="            android:turnScreenOn=&quot;true&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="54"
            column="13"/>
    </issue>

    <issue
        id="ForegroundServicePermission"
        severity="Error"
        message="foregroundServiceType:location requires permission:[android.permission.FOREGROUND_SERVICE_LOCATION] AND any permission in list:[android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION]"
        category="Correctness"
        priority="5"
        summary="Missing permissions required by foregroundServiceType"
        explanation="For targetSdkVersion >= 34, each `foregroundServiceType` listed in the `&lt;service>` element requires specific sets of permissions to be declared in the manifest. If permissions are missing, then when the foreground service is started with a `foregroundServiceType` that has missing permissions, a `SecurityException` will be thrown."
        errorLine1="        &lt;service"
        errorLine2="        ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="62"
            column="9"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="InvalidFragmentVersionForActivityResult"
        severity="Fatal"
        message="Upgrade Fragment version to at least 1.3.0."
        category="Correctness"
        priority="5"
        summary="Update to Fragment 1.3.0 to use ActivityResult APIs"
        explanation="In order to use the ActivityResult APIs you must upgrade your                 Fragment version to 1.3.0. Previous versions of FragmentActivity                 failed to call super.onRequestPermissionsResult() and used invalid request codes"
        url="https://developer.android.com/training/permissions/requesting#make-the-request"
        urls="https://developer.android.com/training/permissions/requesting#make-the-request"
        errorLine1="    private val requestPermissionLauncher = registerForActivityResult("
        errorLine2="                                            ^">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\java\com\example\suraksha\ui\screens\OnboardingActivity.kt"
            line="27"
            column="45"/>
    </issue>

    <issue
        id="RedundantLabel"
        severity="Warning"
        message="Redundant label can be removed"
        category="Correctness"
        priority="5"
        summary="Redundant label on activity"
        explanation="When an activity does not have a label attribute, it will use the one from the application tag. Since the application has already specified the same label, the label on this activity can be omitted."
        errorLine1="            android:label=&quot;@string/app_name&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="38"
            column="13"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.core:core-ktx than 1.10.1 is available: 1.17.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="coreKtx = &quot;1.10.1&quot;"
        errorLine2="          ~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="4"
            column="11"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.test.ext:junit than 1.1.5 is available: 1.3.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="junitVersion = &quot;1.1.5&quot;"
        errorLine2="               ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="6"
            column="16"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.test.espresso:espresso-core than 3.5.1 is available: 3.7.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="espressoCore = &quot;3.5.1&quot;"
        errorLine2="               ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="7"
            column="16"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.lifecycle:lifecycle-runtime-ktx than 2.6.1 is available: 2.9.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="lifecycleRuntimeKtx = &quot;2.6.1&quot;"
        errorLine2="                      ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="8"
            column="23"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.activity:activity-compose than 1.8.0 is available: 1.10.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="activityCompose = &quot;1.8.0&quot;"
        errorLine2="                  ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="9"
            column="19"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.compose:compose-bom than 2024.09.00 is available: 2025.08.00"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="composeBom = &quot;2024.09.00&quot;"
        errorLine2="             ~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="10"
            column="14"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.room:room-compiler than 2.6.1 is available: 2.7.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="room = &quot;2.6.1&quot;"
        errorLine2="       ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="11"
            column="8"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.room:room-ktx than 2.6.1 is available: 2.7.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="room = &quot;2.6.1&quot;"
        errorLine2="       ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="11"
            column="8"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.room:room-runtime than 2.6.1 is available: 2.7.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="room = &quot;2.6.1&quot;"
        errorLine2="       ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="11"
            column="8"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.navigation:navigation-compose than 2.7.7 is available: 2.9.3"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="navigation = &quot;2.7.7&quot;"
        errorLine2="             ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="12"
            column="14"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.android.gms:play-services-location than 21.2.0 is available: 21.3.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="location = &quot;21.2.0&quot;"
        errorLine2="           ~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="13"
            column="12"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.lifecycle:lifecycle-runtime-compose than 2.7.0 is available: 2.9.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="lifecycle = &quot;2.7.0&quot;"
        errorLine2="            ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.lifecycle:lifecycle-viewmodel-compose than 2.7.0 is available: 2.9.2"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="lifecycle = &quot;2.7.0&quot;"
        errorLine2="            ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="LockedOrientationActivity"
        severity="Warning"
        message="Expecting `android:screenOrientation=&quot;unspecified&quot;` or `&quot;fullSensor&quot;` for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices"
        category="Correctness"
        priority="4"
        summary="Incompatible screenOrientation value"
        explanation="The `&lt;activity>` element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens available on Android. To fix the issue, consider declaring the corresponding activity element with `screenOrientation=&quot;unspecified&quot;`or `fullSensor` attribute."
        url="https://developer.android.com/topic/arc/window-management"
        urls="https://developer.android.com/topic/arc/window-management"
        errorLine1="            android:screenOrientation=&quot;portrait&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="40"
            column="13"/>
    </issue>

    <issue
        id="LockedOrientationActivity"
        severity="Warning"
        message="Expecting `android:screenOrientation=&quot;unspecified&quot;` or `&quot;fullSensor&quot;` for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices"
        category="Correctness"
        priority="4"
        summary="Incompatible screenOrientation value"
        explanation="The `&lt;activity>` element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens available on Android. To fix the issue, consider declaring the corresponding activity element with `screenOrientation=&quot;unspecified&quot;`or `fullSensor` attribute."
        url="https://developer.android.com/topic/arc/window-management"
        urls="https://developer.android.com/topic/arc/window-management"
        errorLine1="            android:screenOrientation=&quot;portrait&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="51"
            column="13"/>
    </issue>

    <issue
        id="LockedOrientationActivity"
        severity="Warning"
        message="Expecting `android:screenOrientation=&quot;unspecified&quot;` or `&quot;fullSensor&quot;` for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices"
        category="Correctness"
        priority="4"
        summary="Incompatible screenOrientation value"
        explanation="The `&lt;activity>` element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens available on Android. To fix the issue, consider declaring the corresponding activity element with `screenOrientation=&quot;unspecified&quot;`or `fullSensor` attribute."
        url="https://developer.android.com/topic/arc/window-management"
        urls="https://developer.android.com/topic/arc/window-management"
        errorLine1="            android:screenOrientation=&quot;portrait&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="60"
            column="13"/>
    </issue>

    <issue
        id="NewerVersionAvailable"
        severity="Warning"
        message="A newer version of org.jetbrains.kotlin.android than 2.0.21 is available: 2.2.10"
        category="Correctness"
        priority="4"
        summary="Newer Library Versions Available"
        explanation="This detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the `GradleDependency` check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also **much** slower."
        errorLine1="kotlin = &quot;2.0.21&quot;"
        errorLine2="         ~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="3"
            column="10"/>
    </issue>

    <issue
        id="NewerVersionAvailable"
        severity="Warning"
        message="A newer version of org.jetbrains.kotlin.plugin.compose than 2.0.21 is available: 2.2.10"
        category="Correctness"
        priority="4"
        summary="Newer Library Versions Available"
        explanation="This detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the `GradleDependency` check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also **much** slower."
        errorLine1="kotlin = &quot;2.0.21&quot;"
        errorLine2="         ~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="3"
            column="10"/>
    </issue>

    <issue
        id="NewerVersionAvailable"
        severity="Warning"
        message="A newer version of org.jetbrains.kotlinx:kotlinx-coroutines-android than 1.8.0 is available: 1.10.2"
        category="Correctness"
        priority="4"
        summary="Newer Library Versions Available"
        explanation="This detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the `GradleDependency` check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also **much** slower."
        errorLine1="coroutines = &quot;1.8.0&quot;"
        errorLine2="             ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="15"
            column="14"/>
    </issue>

    <issue
        id="NewerVersionAvailable"
        severity="Warning"
        message="A newer version of org.jetbrains.kotlinx:kotlinx-coroutines-play-services than 1.8.0 is available: 1.10.2"
        category="Correctness"
        priority="4"
        summary="Newer Library Versions Available"
        explanation="This detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the `GradleDependency` check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also **much** slower."
        errorLine1="coroutines = &quot;1.8.0&quot;"
        errorLine2="             ~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\gradle\libs.versions.toml"
            line="15"
            column="14"/>
    </issue>

    <issue
        id="DiscouragedApi"
        severity="Warning"
        message="Fixed screen orientations will be ignored in most cases, starting from Android 16. Android is moving toward a model where apps are expected to adapt to various orientations, display sizes, and aspect ratios."
        category="Correctness"
        priority="2"
        summary="Using discouraged APIs"
        explanation="Discouraged APIs are allowed and are not deprecated, but they may be unfit for common use (e.g. due to slow performance or subtle behavior)."
        errorLine1="            android:screenOrientation=&quot;portrait&quot;>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="40"
            column="13"/>
    </issue>

    <issue
        id="DiscouragedApi"
        severity="Warning"
        message="Fixed screen orientations will be ignored in most cases, starting from Android 16. Android is moving toward a model where apps are expected to adapt to various orientations, display sizes, and aspect ratios."
        category="Correctness"
        priority="2"
        summary="Using discouraged APIs"
        explanation="Discouraged APIs are allowed and are not deprecated, but they may be unfit for common use (e.g. due to slow performance or subtle behavior)."
        errorLine1="            android:screenOrientation=&quot;portrait&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="51"
            column="13"/>
    </issue>

    <issue
        id="DiscouragedApi"
        severity="Warning"
        message="Fixed screen orientations will be ignored in most cases, starting from Android 16. Android is moving toward a model where apps are expected to adapt to various orientations, display sizes, and aspect ratios."
        category="Correctness"
        priority="2"
        summary="Using discouraged APIs"
        explanation="Discouraged APIs are allowed and are not deprecated, but they may be unfit for common use (e.g. due to slow performance or subtle behavior)."
        errorLine1="            android:screenOrientation=&quot;portrait&quot; />"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="60"
            column="13"/>
    </issue>

    <issue
        id="PermissionImpliesUnsupportedChromeOsHardware"
        severity="Error"
        message="Permission exists without corresponding hardware `&lt;uses-feature android:name=&quot;android.hardware.telephony&quot; required=&quot;false&quot;>` tag"
        category="Correctness:Chrome OS"
        priority="3"
        summary="Permission Implies Unsupported Chrome OS Hardware"
        explanation="The `&lt;uses-permission>` element should not require a permission that implies an unsupported large screen hardware feature. Google Play assumes that certain hardware related permissions indicate that the underlying hardware features are required by default. To fix the issue, consider declaring the corresponding &lt;uses-feature> element with `required=&quot;false&quot;` attribute."
        url="https://developer.android.com/topic/arc/manifest.html#implied-features"
        urls="https://developer.android.com/topic/arc/manifest.html#implied-features"
        errorLine1="    &lt;uses-permission android:name=&quot;android.permission.SEND_SMS&quot; />"
        errorLine2="     ~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\AndroidManifest.xml"
            line="6"
            column="6"/>
    </issue>

    <issue
        id="KaptUsageInsteadOfKsp"
        severity="Warning"
        message="This library supports using KSP instead of kapt, which greatly improves performance. Learn more: https://developer.android.com/studio/build/migrate-to-ksp"
        category="Performance"
        priority="4"
        summary="Kapt usage should be replaced with KSP"
        explanation="KSP is a more efficient replacement for kapt. For libraries that support both, KSP should be used to improve build times."
        url="https://developer.android.com/studio/build/migrate-to-ksp"
        urls="https://developer.android.com/studio/build/migrate-to-ksp"
        errorLine1="    kapt(libs.androidx.room.compiler)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\build.gradle.kts"
            line="57"
            column="5"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.purple_200` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;color name=&quot;purple_200&quot;>#FFBB86FC&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\colors.xml"
            line="3"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.purple_500` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;color name=&quot;purple_500&quot;>#FF6200EE&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\colors.xml"
            line="4"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.purple_700` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;color name=&quot;purple_700&quot;>#FF3700B3&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\colors.xml"
            line="5"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.teal_200` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;color name=&quot;teal_200&quot;>#FF03DAC5&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\colors.xml"
            line="6"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.teal_700` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;color name=&quot;teal_700&quot;>#FF018786&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\colors.xml"
            line="7"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.black` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;color name=&quot;black&quot;>#FF000000&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\colors.xml"
            line="8"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.white` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;color name=&quot;white&quot;>#FFFFFFFF&lt;/color>"
        errorLine2="           ~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\colors.xml"
            line="9"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.app_description` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;app_description&quot;>Women Safety App&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.nav_home` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;nav_home&quot;>Home&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.nav_contacts` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;nav_contacts&quot;>Contacts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.nav_settings` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;nav_settings&quot;>Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="10"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.home_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;home_title&quot;>Suraksha Safety&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="13"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.home_subtitle` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;home_subtitle&quot;>Your safety is our priority&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.sos_button` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;sos_button&quot;>SOS&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.sos_sent` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;sos_sent&quot;>SOS SENT!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.location_status` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;location_status&quot;>Current Location&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.location_unavailable` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;location_unavailable&quot;>Location not available&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="18"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.quick_actions` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;quick_actions&quot;>Quick Actions&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="19"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.fake_call` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;fake_call&quot;>Fake Call&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.timer` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;timer&quot;>Timer&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.record` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;record&quot;>Record&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.shake_sos` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;shake_sos&quot;>Shake SOS&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.emergency_contacts` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;emergency_contacts&quot;>Emergency Contacts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.no_contacts` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;no_contacts&quot;>No emergency contacts added&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="25"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.safety_timer_active` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;safety_timer_active&quot;>Safety Timer Active&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="26"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.cancel_timer` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;cancel_timer&quot;>Cancel Timer&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="27"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.contacts_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;contacts_title&quot;>Emergency Contacts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="30"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.contacts_subtitle` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;contacts_subtitle&quot;>Add up to 3 trusted contacts for emergency alerts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="31"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.add_contact` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;add_contact&quot;>Add Emergency Contact&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="32"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.max_contacts` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;max_contacts&quot;>Maximum 3 contacts allowed&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="33"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.no_contacts_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;no_contacts_title&quot;>No Emergency Contacts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="34"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.no_contacts_message` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;no_contacts_message&quot;>Add trusted contacts to receive emergency alerts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="35"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.add_contact_dialog_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;add_contact_dialog_title&quot;>Add Emergency Contact&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="36"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.edit_contact_dialog_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;edit_contact_dialog_title&quot;>Edit Emergency Contact&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.contact_name` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;contact_name&quot;>Name&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="38"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.contact_phone` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;contact_phone&quot;>Phone Number&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="39"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.add` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;add&quot;>Add&lt;/string>"
        errorLine2="            ~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="40"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.update` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;update&quot;>Update&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="41"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.cancel` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;cancel&quot;>Cancel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="42"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.settings_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;settings_title&quot;>Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="45"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.safety_features` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;safety_features&quot;>Safety Features&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="46"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.disguised_mode` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;disguised_mode&quot;>Disguised Mode&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="47"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.disguised_mode_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;disguised_mode_desc&quot;>Make app look like a calculator&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="48"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.shake_trigger` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;shake_trigger&quot;>Shake to Trigger SOS&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="49"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.shake_trigger_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;shake_trigger_desc&quot;>Shake phone 3 times to trigger emergency&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="50"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.auto_recording` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;auto_recording&quot;>Auto Recording&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="51"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.auto_recording_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;auto_recording_desc&quot;>Record audio during SOS events&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="52"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.notifications` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;notifications&quot;>Notifications&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.emergency_notifications` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;emergency_notifications&quot;>Emergency Notifications&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="54"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.emergency_notifications_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;emergency_notifications_desc&quot;>Show notifications for safety events&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="55"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.vibration_alerts` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;vibration_alerts&quot;>Vibration Alerts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="56"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.vibration_alerts_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;vibration_alerts_desc&quot;>Vibrate on SOS trigger&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="57"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.privacy_security` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;privacy_security&quot;>Privacy &amp;amp; Security&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="58"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.data_storage` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;data_storage&quot;>Data Storage&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="59"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.data_storage_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;data_storage_desc&quot;>All data stored locally on device&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="60"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.location_accuracy` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;location_accuracy&quot;>Location Accuracy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="61"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.location_accuracy_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;location_accuracy_desc&quot;>High accuracy GPS for precise location&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="62"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.about` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;about&quot;>About&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="63"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.app_version` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;app_version&quot;>App Version&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="64"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.help_support` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;help_support&quot;>Help &amp;amp; Support&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="65"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.help_support_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;help_support_desc&quot;>How to use the app&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="66"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.privacy_policy` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;privacy_policy&quot;>Privacy Policy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="67"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.privacy_policy_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;privacy_policy_desc&quot;>How we protect your data&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="68"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.emergency_info` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;emergency_info&quot;>Emergency Information&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="69"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.emergency_info_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;emergency_info_text&quot;>• SOS button sends your location to emergency contacts\n• Shake your phone 3 times to trigger SOS\n• Fake call feature helps in uncomfortable situations\n• Timer automatically triggers SOS if not cancelled\n• All data is stored locally for your privacy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="70"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_welcome` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_welcome&quot;>Welcome to Suraksha&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="73"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_subtitle` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_subtitle&quot;>Your Personal Safety Companion&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="74"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_features` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_features&quot;>Key Features&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="75"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_sos_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_sos_title&quot;>One-Tap SOS&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="76"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_sos_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_sos_desc&quot;>Send emergency alerts with your location to trusted contacts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="77"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_shake_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_shake_title&quot;>Shake to Trigger&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="78"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_shake_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_shake_desc&quot;>Shake your phone 3 times to trigger SOS automatically&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="79"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_fake_call_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_fake_call_title&quot;>Fake Call&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="80"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_fake_call_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_fake_call_desc&quot;>Simulate incoming calls to escape uncomfortable situations&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="81"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_timer_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_timer_title&quot;>Safety Timer&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="82"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_timer_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_timer_desc&quot;>Set countdown timers that trigger SOS if not cancelled&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="83"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_recording_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_recording_title&quot;>Emergency Recording&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="84"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_recording_desc` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_recording_desc&quot;>Automatically record audio during SOS events&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="85"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_permissions` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_permissions&quot;>Required Permissions&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="86"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.onboarding_permissions_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;onboarding_permissions_text&quot;>• SMS: To send emergency messages\n• Location: To share your location with contacts\n• Microphone: To record emergency audio\n• Storage: To save recordings locally&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="87"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.get_started` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;get_started&quot;>Get Started&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="88"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.fake_call_caller` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;fake_call_caller&quot;>Mom&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="91"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.fake_call_incoming` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;fake_call_incoming&quot;>Incoming call...&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="92"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.fake_call_safety_note` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;fake_call_safety_note&quot;>This is a fake call for safety purposes&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="93"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.schedule_fake_call` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;schedule_fake_call&quot;>Schedule Fake Call&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="94"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.schedule_call_dialog_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;schedule_call_dialog_title&quot;>Schedule Fake Call&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="95"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.schedule_call_dialog_text` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;schedule_call_dialog_text&quot;>Choose when to receive a fake call:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="96"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.ten_seconds` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;ten_seconds&quot;>10 seconds&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="97"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.thirty_seconds` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;thirty_seconds&quot;>30 seconds&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="98"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.one_minute` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;one_minute&quot;>1 minute&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="99"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.error_permission_denied` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;error_permission_denied&quot;>Permission denied&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="102"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.error_location_unavailable` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;error_location_unavailable&quot;>Location not available&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="103"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.error_sms_failed` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;error_sms_failed&quot;>Failed to send SMS&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="104"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.error_contact_required` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;error_contact_required&quot;>Name and phone number are required&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="105"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.error_invalid_phone` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;error_invalid_phone&quot;>Please enter a valid phone number&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="106"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.error_add_contact` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;error_add_contact&quot;>Failed to add contact&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="107"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.error_update_contact` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;error_update_contact&quot;>Failed to update contact&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="108"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.error_delete_contact` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;error_delete_contact&quot;>Failed to delete contact&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="109"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.success_contact_added` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;success_contact_added&quot;>Contact added successfully&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="112"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.success_contact_updated` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;success_contact_updated&quot;>Contact updated successfully&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="113"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.success_contact_deleted` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;success_contact_deleted&quot;>Contact deleted successfully&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="114"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.sos_message_title` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;sos_message_title&quot;>🚨 EMERGENCY SOS 🚨&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="117"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.sos_message_body` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;sos_message_body&quot;>This is an emergency message from Suraksha Safety App.\nTime: %1$s\n%2$s\n\nPlease respond immediately!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="118"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.sos_location_format` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;sos_location_format&quot;>Location: https://maps.google.com/?q=%1$f,%2$f&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="119"
            column="13"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.sos_location_unavailable` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests =true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests =true.&#xA;,"
        errorLine1="    &lt;string name=&quot;sos_location_unavailable&quot;>Location: Unable to get current location&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="120"
            column="13"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Ellipsis string can be replaced with ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (\u2026, &amp;#8230;). This can help make the text more readable."
        url="https://en.wikipedia.org/wiki/Ellipsis"
        urls="https://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="    &lt;string name=&quot;fake_call_incoming&quot;>Incoming call...&lt;/string>"
        errorLine2="                                      ~~~~~~~~~~~~~~~~">
        <location
            file="G:\Android_applications\Suraksha\app\src\main\res\values\strings.xml"
            line="92"
            column="39"/>
    </issue>

</issues>
